'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function thenifyHook(extraContent1) {
  var extraContent = extraContent1; // cannot access extraContent1 below. why not?

  return function (hook) {
    return function (result) {
      var context = Object.assign({}, { type: 'after', params: {}, result: result }, extraContent);

      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result !== null && result.total && result.data) {
        context.method = 'find'; // needed by feathers-hooks-common/src/service/get-items.js
      }

      return Promise.resolve().then(function () {
        return hook(context);
      }).then(function (newContext) {
        if (newContext === undefined) {
          return;
        }

        var result = newContext.result;

        if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result !== null && result.total && result.data) {
          // find
          return newContext.result;
        }

        return newContext.result.data || newContext.result;
      });
    };
  };
};