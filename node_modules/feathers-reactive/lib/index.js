'use strict';

var _debug2 = require('debug');

var _debug3 = _interopRequireDefault(_debug2);

var _utils = require('feathers-commons/lib/utils');

var _Observable = require('rxjs/Observable');

require('rxjs/add/observable/fromEvent');

require('rxjs/add/observable/fromPromise');

require('rxjs/add/observable/merge');

require('rxjs/add/operator/concat');

require('rxjs/add/operator/exhaustMap');

require('rxjs/add/operator/filter');

require('rxjs/add/operator/let');

require('rxjs/add/operator/map');

require('rxjs/add/operator/mapTo');

require('rxjs/add/operator/mergeMap');

require('rxjs/add/operator/scan');

var _resource = require('./resource');

var _resource2 = _interopRequireDefault(_resource);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _strategies = require('./strategies');

var _strategies2 = _interopRequireDefault(_strategies);

var _utils2 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug3.default)('feathers-reactive');

function FeathersRx() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var listStrategies = (0, _strategies2.default)();

  if (!options.idField) {
    throw new Error('feathers-reactive: setting options.idField is mandatory');
  }

  options = Object.assign({
    dataField: 'data',
    sorter: _utils2.makeSorter,
    matcher: _utils.matcher,
    // Whether to requery service when a change is detected
    listStrategy: 'smart',
    listStrategies: listStrategies
  }, options);

  var mixin = function mixin(service) {
    var app = this;

    var events = {
      created: _Observable.Observable.fromEvent(service, 'created'),
      updated: _Observable.Observable.fromEvent(service, 'updated'),
      patched: _Observable.Observable.fromEvent(service, 'patched'),
      removed: _Observable.Observable.fromEvent(service, 'removed')
    };

    // object to hold our reactive methods
    var reactiveMethods = {};

    var cache = {
      find: {},
      get: {}
    };

    app.methods.forEach(function (method) {
      if (typeof service[method] === 'function') {
        reactiveMethods[method] = method === 'find' ? (0, _list2.default)(options) : (0, _resource2.default)(options, method);
      }
    });

    var mixin = {
      _cache: cache,

      created$: events.created,
      updated$: events.updated,
      patched$: events.patched,
      removed$: events.removed,

      rx: function rx() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this._rx = options;
        return this;
      },
      watch: function watch() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var boundMethods = {};

        Object.keys(reactiveMethods).forEach(function (method) {
          var position = (0, _utils2.getParamsPosition)(method);

          boundMethods[method] = function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            // inject `options` into `params.rx`
            args[position] = Object.assign(args[position] || {}, { rx: options });
            return reactiveMethods[method].apply(reactiveMethods, args);
          };
        });

        return boundMethods;
      }
    };

    // get the extended service object
    var newService = service.mixin(mixin);

    // workaround for Firefox
    // FF defines Object.prototype.watch(), so uberproto doesn't recognize the mixin's .watch()
    // see https://github.com/feathersjs-ecosystem/feathers-reactive/issues/67
    if (Object.prototype.watch && Object.prototype.watch === newService.watch) {
      newService.watch = mixin.watch;
    }

    // bind the new service to all reactive methods
    for (var method in reactiveMethods) {
      reactiveMethods[method] = reactiveMethods[method].bind(newService);
    }
  };

  return function () {
    debug('Initializing feathers-reactive plugin');

    this.mixins.push(mixin);
  };
}

FeathersRx.strategy = _strategies2.default;

module.exports = FeathersRx;