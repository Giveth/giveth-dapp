"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _uniq2 = require("lodash/uniq");

var _uniq3 = _interopRequireDefault(_uniq2);

var _without2 = require("lodash/without");

var _without3 = _interopRequireDefault(_without2);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TokenInput = (_temp2 = _class = function (_Component) {
  _inherits(TokenInput, _Component);

  function TokenInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TokenInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TokenInput.__proto__ || Object.getPrototypeOf(TokenInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      filter: '',
      isOpen: false
    }, _this.setContainerRef = function (node) {
      _this.container = node;
    }, _this.handleChange = function (value) {
      var _this$props = _this.props,
          name = _this$props.name,
          onSelect = _this$props.onSelect;


      onSelect({ target: { name: name, value: value } });
    }, _this.handleInput = function (_ref2) {
      var filter = _ref2.target.value;

      _this.setState({ filter: filter });
    }, _this.handleSelect = function (selectedId) {
      return function () {
        var _this$props2 = _this.props,
            value = _this$props2.value,
            maxLength = _this$props2.maxLength;
        // if options maxLength reached

        if (maxLength && value.length >= maxLength) return;

        var selected = (0, _uniq3.default)(value.concat([selectedId]));
        _this.handleChange(selected);
        _this.setState({
          filter: '',
          isOpen: false
        });
      };
    }, _this.handleRemove = function (removedId) {
      return function () {
        var selected = (0, _without3.default)(_this.props.value, removedId);

        _this.handleChange(selected);
      };
    }, _this.handleClickOutside = function (_ref3) {
      var target = _ref3.target;

      if (!_this.container.contains(target)) {
        _this.closeDropdown();
      }
    }, _this.closeDropdown = function () {
      if (_this.state.isOpen) {
        _this.setState({ filter: '', isOpen: false });
      }
    }, _this.openDropdown = function () {
      if (!_this.state.isOpen) {
        _this.setState({ isOpen: true });
      }
    }, _this.renderOption = function (option) {
      return _react2.default.createElement(
        "div",
        {
          key: "option-" + option.id,
          className: "ReactTokenInput__option",
          onClick: _this.handleSelect(option.id)
        },
        option.element || option.name
      );
    }, _this.renderSelectedToken = function (selected) {
      return _react2.default.createElement(
        "div",
        {
          key: "token_" + selected.id,
          className: "ReactTokenInput__token"
        },
        _react2.default.createElement(
          "span",
          { className: "icon-times",
            onClick: _this.handleRemove(selected.id) },
          "\xD7"
        ),
        selected.name
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TokenInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('click', this.handleClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleClickOutside);
    }

    // unselect selected option

  }, {
    key: "render",
    value: function render() {
      var _state = this.state,
          filter = _state.filter,
          isOpen = _state.isOpen;
      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          id = _props.id,
          isLoading = _props.isLoading,
          loaderElement = _props.loaderElement,
          maxLength = _props.maxLength,
          name = _props.name,
          placeholder = _props.placeholder,
          value = _props.value;

      var isMaxLengthReached = maxLength !== 0 && value.length !== 0 && maxLength === value.length;

      return _react2.default.createElement(
        "div",
        {
          ref: this.setContainerRef,
          className: (0, _classnames2.default)("ReactTokenInput", _defineProperty({
            "ReactTokenInput--disabled": disabled,
            "ReactTokenInput--is-loading": isLoading,
            "ReactTokenInput--maxlength": isMaxLengthReached,
            "ReactTokenInput--open": isOpen
          }, className, className)) },
        this.selected.map(this.renderSelectedToken),
        !isMaxLengthReached && _react2.default.createElement(
          "div",
          { className: "ReactTokenInput__input-col" },
          _react2.default.createElement("input", {
            autoComplete: "off",
            className: "ReactTokenInput__input",
            disabled: disabled,
            id: id,
            name: name,
            onChange: this.handleInput,
            placeholder: placeholder,
            spellCheck: "false",
            value: filter,
            onFocus: this.openDropdown
          }),
          _react2.default.createElement(
            "div",
            { className: "ReactTokenInput__options-list" },
            isLoading && (loaderElement || _react2.default.createElement(
              "span",
              { className: "ReactTokenInput__loading-label" },
              "Loading..."
            )),
            this.options.length ? this.options.map(this.renderOption) : _react2.default.createElement(
              "div",
              { className: "text-muted p-1" },
              "No options"
            )
          )
        )
      );
    }
  }, {
    key: "selected",
    get: function get() {
      var _props2 = this.props,
          options = _props2.options,
          value = _props2.value;


      return options.filter(function (option) {
        return value.indexOf(option.id) > -1;
      });
    }
  }, {
    key: "options",
    get: function get() {
      var _props3 = this.props,
          options = _props3.options,
          value = _props3.value;
      var filter = this.state.filter;


      return options.filter(function (option) {
        var isSelected = value.indexOf(option.id) > -1;

        if (filter) {
          return !isSelected && new RegExp(filter, 'gi').test(option.name);
        }

        return !isSelected;
      });
    }
  }]);

  return TokenInput;
}(_react.Component), _class.propTypes = {
  className: _react.PropTypes.string,
  // inputs' disabled prop
  disabled: _react.PropTypes.bool,
  // inputs' id
  id: _react.PropTypes.string,
  // Whether options are being loaded
  isLoading: _react.PropTypes.bool,
  // custom loader element
  loaderElement: _react.PropTypes.element,
  // Maximum options to select
  maxLength: _react.PropTypes.number,
  // Input name
  name: _react.PropTypes.string.isRequired,
  // Handle select option event
  onSelect: _react.PropTypes.func.isRequired,
  options: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    // custom element for option display
    element: _react.PropTypes.element,
    id: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
    name: _react.PropTypes.string.isRequired
  })).isRequired,
  // input placeholder
  placeholder: _react.PropTypes.string,
  // selected options array
  value: _react.PropTypes.array.isRequired
}, _class.defaultProps = {
  maxLength: 0,
  options: [],
  placeholder: 'Choose option',
  value: []
}, _temp2);
exports.default = TokenInput;