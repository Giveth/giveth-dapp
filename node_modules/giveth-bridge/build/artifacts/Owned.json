{
  "contract_name": "Owned",
  "networks": {
    "9999": {
      "abi": [
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "name": "changeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_dac",
              "type": "address"
            }
          ],
          "name": "removeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newOwnerCandidate",
              "type": "address"
            }
          ],
          "name": "proposeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [],
          "name": "acceptOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "newOwnerCandidate",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "by",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipRequested",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "OwnershipRemoved",
          "type": "event"
        }
      ],
      "solc_version": "0.4.21+commit.dfe3193c",
      "optimizer_enabled": 200,
      "bytecode": "0x6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556103b08061003b6000396000f3006060604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461007c578063666a34271461009d578063710bf322146100bc57806379ba5097146100db5780638da5cb5b146100ee578063d091b5501461011d575b600080fd5b341561008757600080fd5b61009b600160a060020a0360043516610130565b005b34156100a857600080fd5b61009b600160a060020a03600435166101d1565b34156100c757600080fd5b61009b600160a060020a036004351661025b565b34156100e657600080fd5b61009b6102d9565b34156100f957600080fd5b610101610366565b604051600160a060020a03909116815260200160405180910390f35b341561012857600080fd5b610101610375565b6000805433600160a060020a0390811691161461014c57600080fd5b600160a060020a038216151561016157600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146101ec57600080fd5b610dac600160a060020a0382161461020357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461027657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146102f757600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a7230582094f3ef431e86235027f139567f8a43276a952d0a2b46179793b470721c69ca240029",
      "runtime_bytecode": "0x6060604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632af4c31e811461007c578063666a34271461009d578063710bf322146100bc57806379ba5097146100db5780638da5cb5b146100ee578063d091b5501461011d575b600080fd5b341561008757600080fd5b61009b600160a060020a0360043516610130565b005b34156100a857600080fd5b61009b600160a060020a03600435166101d1565b34156100c757600080fd5b61009b600160a060020a036004351661025b565b34156100e657600080fd5b61009b6102d9565b34156100f957600080fd5b610101610366565b604051600160a060020a03909116815260200160405180910390f35b341561012857600080fd5b610101610375565b6000805433600160a060020a0390811691161461014c57600080fd5b600160a060020a038216151561016157600080fd5b5060008054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff1980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146101ec57600080fd5b610dac600160a060020a0382161461020357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b60005433600160a060020a0390811691161461027657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60015460009033600160a060020a039081169116146102f757600080fd5b50600080546001805473ffffffffffffffffffffffffffffffffffffffff19808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600054600160a060020a031681565b600154600160a060020a0316815600a165627a7a7230582094f3ef431e86235027f139567f8a43276a952d0a2b46179793b470721c69ca240029",
      "updated_at": 1524749797962,
      "source_map": "616:2630:7:-;;;959:59;;;;;;;;993:5;:18;;-1:-1:-1;;;;;1001:10:7;993:18;-1:-1:-1;;;;;;993:18:7;;;;;;616:2630;;;;;;",
      "source_map_runtime": "616:2630:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2422:246;;;;;;;;;;-1:-1:-1;;;;;2422:246:7;;;;;;;3062:182;;;;;;;;;;-1:-1:-1;;;;;3062:182:7;;;;;1585:185;;;;;;;;;;-1:-1:-1;;;;;1585:185:7;;;;;1882:242;;;;;;;;;;;;638:20;;;;;;;;;;;;;;;-1:-1:-1;;;;;638:20:7;;;;;;;;;;;;;;664:32;;;;;;;;;;;;2422:246;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:7;;;;2493:25;;;;;;-1:-1:-1;2548:5:7;;;-1:-1:-1;;;;;2563:17:7;;;-1:-1:-1;;2563:17:7;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;3062:182::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:7;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;3160:11:7;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;1585:185::-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;1666:38:7;-1:-1:-1;;;;;1666:38:7;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;1882:242::-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:7;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:7;;;;2019:17;;-1:-1:-1;;2011:25:7;;;-1:-1:-1;;;;;2019:17:7;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;638:20::-;;;-1:-1:-1;;;;;638:20:7;;:::o;664:32::-;;;-1:-1:-1;;;;;664:32:7;;:::o",
      "sources": [
        "./contracts/ForeignGivethBridge.sol",
        "./contracts/GivethBridge.sol",
        "./contracts/GivethBridgeMock.sol",
        "./contracts/lib/Pausable.sol",
        "./contracts/lib/Vault.sol",
        "giveth-common-contracts/contracts/ERC20.sol",
        "giveth-common-contracts/contracts/Escapable.sol",
        "giveth-common-contracts/contracts/Owned.sol",
        "lib/Pausable.sol",
        "minimetoken/contracts/Controlled.sol",
        "minimetoken/contracts/MiniMeToken.sol",
        "minimetoken/contracts/TokenController.sol"
      ],
      "sourceCodes": [
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"giveth-common-contracts/contracts/Escapable.sol\";\nimport \"minimetoken/contracts/MiniMeToken.sol\";\nimport \"lib/Pausable.sol\";\n\ncontract ForeignGivethBridge is Escapable, Pausable, TokenController {\n    // TODO: what happens when bridge shuts down? how do we transfer token mappings?\n\n    MiniMeTokenFactory public tokenFactory;\n    address public liquidPledging;\n\n    mapping(address => address) public tokenMapping;\n    mapping(address => address) public inverseTokenMapping;\n\n    event Deposit(address indexed sender, address token, uint amount, bytes32 homeTx, bytes data);\n    event Withdraw(address recipient, address token, uint amount);\n    event TokenAdded(address mainToken, address sideToken);\n\n    //== constructor\n\n    function ForeignGivethBridge(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination, \n        address _tokenFactory,\n        address _liquidPledging\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public \n    {\n        require(_tokenFactory != 0);\n        require(_liquidPledging != 0);\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        liquidPledging = _liquidPledging;\n    }\n\n    //== public methods\n\n    // TODO: specify withdraw address?\n    function withdraw(address sideToken, uint amount) whenNotPaused external {\n        address mainToken = inverseTokenMapping[sideToken];\n        require(mainToken != 0 || tokenMapping[0] == sideToken);\n\n        MiniMeToken(sideToken).destroyTokens(msg.sender, amount);\n\n        emit Withdraw(msg.sender, mainToken, amount);\n    }\n\n    function deposit(address sender, address mainToken, uint amount, bytes32 homeTx, bytes data) onlyOwner external {\n        address sideToken = tokenMapping[mainToken];\n        require(sideToken != 0);\n\n        MiniMeToken(sideToken).generateTokens(address(this), amount);\n\n        if (MiniMeToken(sideToken).allowance(address(this), liquidPledging) < amount) {\n            MiniMeToken(sideToken).approve(liquidPledging, uint(0 - 1));\n        }\n\n        require(liquidPledging.call(data));\n        emit Deposit(sender, mainToken, amount, homeTx, data);\n    }\n\n    function addToken(address mainToken, string tokenName, uint8 decimals, string tokenSymbol) onlyOwner external {\n        require(tokenMapping[mainToken] == 0);\n        MiniMeToken sideToken = new MiniMeToken(tokenFactory, 0x0, 0, tokenName, decimals, tokenSymbol, true);\n        sideToken.approve(liquidPledging, uint(0 - 1));\n        tokenMapping[mainToken] = address(sideToken);\n        inverseTokenMapping[address(sideToken)] = mainToken;\n        emit TokenAdded(mainToken, address(sideToken));\n    }\n\n////////////////\n// TokenController\n////////////////\n\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool) {\n        return false;\n    }\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n        return true;\n    }\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n        return true;\n    }\n}",
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"giveth-common-contracts/contracts/ERC20.sol\";\nimport \"./lib/Vault.sol\";\n\n// @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n// this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n// will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n// will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n// the dapp\ncontract GivethBridge is Vault {\n\n    mapping(address => bool) tokenWhitelist;\n\n    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);\n    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);\n    event EscapeFundsCalled(address token, uint amount);\n\n    //== constructor\n\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\n    ///  call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\n    ///  funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract in an emergency\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    /// @param _timeLock Initial number of seconds that payments are delayed\n    ///  after they are authorized (a security precaution)\n    /// @param _securityGuard Address that will be able to delay the payments\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\n    ///  the `securityGuard` functionality\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\n    ///   the payment if needed\n    function GivethBridge(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Vault(\n        _escapeHatchCaller,\n        _escapeHatchDestination,\n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public\n    {\n        tokenWhitelist[0] = true; // enable eth transfers\n    }\n\n    //== public methods\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {\n        donateAndCreateGiver(giver, receiverId, 0, 0);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giver != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit DonateAndCreateGiver(giver, receiverId, token, amount);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donate(uint64 giverId, uint64 receiverId) payable external {\n        donate(giverId, receiverId, 0, 0);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giverId != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit Donate(giverId, receiverId, token, amount);\n    }\n\n    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {\n        tokenWhitelist[token] = accepted;\n    }\n\n    /// Transfer tokens/eth to the escapeHatchDestination.\n    /// Used as a safety mechanism to prevent the bridge from holding too much value\n    /// before being thoroughly battle-tested.\n    /// @param _token to transfer\n    /// @param _amount to transfer\n    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {\n        /// @dev Logic for ether\n        if (_token == 0) {\n            escapeHatchDestination.transfer(_amount);\n            emit EscapeFundsCalled(_token, _amount);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        require(token.transfer(escapeHatchDestination, _amount));\n        emit EscapeFundsCalled(_token, _amount);\n    }\n\n    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {\n        require(tokenWhitelist[token]);\n        amount = _amount;\n\n        // eth donation\n        if (token == 0) {\n            amount = msg.value;\n        }\n\n        require(amount > 0);\n\n        if (token != 0) {\n            require(ERC20(token).transferFrom(msg.sender, this, amount));\n        }\n    }\n}",
        "pragma solidity ^0.4.21;\n/*\n    Copyright 2017, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"./GivethBridge.sol\";\n\n/// @dev `GivethBridgeMock` allows for mocking up\n///  a `GivethBridge` contract with the added ability\n///  to manipulate the block time for testing purposes.\ncontract GivethBridgeMock is GivethBridge {\n\n    uint public mock_time;\n\n    function GivethBridgeMock(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) GivethBridge(\n        _escapeHatchCaller,\n        _escapeHatchDestination,\n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public\n    {\n    }\n\n    /// @dev `_getTime` is a basic getter function for\n    ///  the mock_time parameter\n    function _getTime() internal view returns (uint) {\n        return mock_time;\n    }\n\n    /// @dev `setMockedTime` is a basic setter function for\n    ///  the mock_time parameter\n    /// @param _t This is the value to which the mocked time\n    ///  will be set.\n    function setMockedTime(uint _t) public {\n        mock_time = _t;\n    }\n}",
        "pragma solidity ^0.4.21;\n\nimport \"giveth-common-contracts/contracts/Owned.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}",
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2016, Jordi Baylina, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title Vault Contract\n/// @author Jordi Baylina, RJ Ewing\n/// @notice This contract holds funds for Campaigns and automates payments. For\n///  this iteration the funds will come straight from the Giveth Multisig as a\n///  safety precaution, but once fully tested and optimized this contract will\n///  be a safe place to store funds equipped with optional variable time delays\n///  to allow for an optional escape hatch\n\nimport \"giveth-common-contracts/contracts/Escapable.sol\";\nimport \"./Pausable.sol\";\n\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\n///  contract that holds funds for Campaigns and automates payments.\ncontract Vault is Escapable, Pausable {\n\n    /// @dev `Payment` is a public structure that describes the details of\n    ///  each payment making it easy to track the movement of funds\n    ///  transparently\n    struct Payment {\n        string name;     // What is the purpose of this payment\n        bytes32 reference;  // Reference of the payment.\n        address spender;        // Who is sending the funds\n        uint earliestPayTime;   // The earliest a payment can be made (Unix Time)\n        bool canceled;         // If True then the payment has been canceled\n        bool paid;              // If True then the payment has been paid\n        address recipient;      // Who is receiving the funds\n        address token;          // Token this payment represents\n        uint amount;            // The amount of wei sent in the payment\n        uint securityGuardDelay;// The miliseconds `securityGuard` can delay payment\n    }\n\n    Payment[] public authorizedPayments;\n\n    address public securityGuard;\n    uint public absoluteMinTimeLock;\n    uint public timeLock;\n    uint public maxSecurityGuardDelay;\n\n    /// @dev The white list of approved addresses allowed to set up && receive\n    ///  payments from this vault\n    mapping (address => bool) public allowedSpenders;\n\n    // @dev Events to make the payment movements easy to find on the blockchain\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\n    event PaymentCanceled(uint indexed idPayment);\n    event SpenderAuthorization(address indexed spender, bool authorized);\n\n    /// @dev The address assigned the role of `securityGuard` is the only\n    ///  addresses that can call a function with this modifier\n    modifier onlySecurityGuard { \n        require(msg.sender == securityGuard);\n        _;\n    }\n\n    /// @notice The Constructor creates the Vault on the blockchain\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\n    ///  call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\n    ///  funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract in an emergency\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    /// @param _timeLock Initial number of seconds that payments are delayed\n    ///  after they are authorized (a security precaution)\n    /// @param _securityGuard Address that will be able to delay the payments\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\n    ///  the `securityGuard` functionality\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\n    ///   the payment if needed\n    function Vault(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\n    {\n        absoluteMinTimeLock = _absoluteMinTimeLock;\n        timeLock = _timeLock;\n        securityGuard = _securityGuard;\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n/////////\n// Helper functions\n/////////\n\n    /// @notice States the total number of authorized payments in this contract\n    /// @return The number of payments ever authorized even if they were canceled\n    function numberOfAuthorizedPayments() public view returns (uint) {\n        return authorizedPayments.length;\n    }\n\n////////\n// Spender Interface\n////////\n\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\n    /// @param _name Brief description of the payment that is authorized\n    /// @param _reference External reference of the payment\n    /// @param _recipient Destination of the payment\n    /// @param _amount Amount to be paid in wei\n    /// @param _paymentDelay Number of miliseconds the payment is to be delayed, if\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\n    /// @return The Payment ID number for the new authorized payment\n    function authorizePayment(\n        string _name,\n        bytes32 _reference,\n        address _recipient,\n        address _token,\n        uint _amount,\n        uint _paymentDelay\n    ) whenNotPaused external returns(uint) {\n\n        // Fail if you arent on the `allowedSpenders` white list\n        require(allowedSpenders[msg.sender]);\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\n        authorizedPayments.length++;\n\n        // The following lines fill out the payment struct\n        Payment storage p = authorizedPayments[idPayment];\n        p.spender = msg.sender;\n\n        // Overflow protection\n        require(_paymentDelay <= 10**18);\n\n        // Determines the earliest the recipient can receive payment (Unix time)\n        p.earliestPayTime = _paymentDelay >= timeLock ?\n                                _getTime() + _paymentDelay :\n                                _getTime() + timeLock;\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.name = _name;\n        p.reference = _reference;\n        p.token = _token;\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\n        return idPayment;\n    }\n\n    /// @notice only `allowedSpenders[]` The recipient of a payment calls this\n    ///  function to send themselves the ether after the `earliestPayTime` has\n    ///  expired\n    /// @param _idPayment The payment ID to be executed\n    function collectAuthorizedPayment(uint _idPayment) whenNotPaused external {\n\n        // Check that the `_idPayment` has been added to the payments struct\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        // Checking for reasons not to execute the payment\n        require(msg.sender == p.recipient);\n        require(allowedSpenders[p.spender]);\n        require(_getTime() >= p.earliestPayTime);\n        require(!p.canceled);\n        require(!p.paid);\n        // if (this.balance < p.amount);\n\n        p.paid = true; // Set the payment to being paid\n\n        // Make the payment\n        if (p.token == 0) {\n            p.recipient.transfer(p.amount);\n        } else {\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\n        }\n\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\n    }\n\n/////////\n// SecurityGuard Interface\n/////////\n\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of miliseconds\n    /// @param _idPayment ID of the payment to be delayed\n    /// @param _delay The number of miliseconds to delay the payment\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\n        require(_idPayment < authorizedPayments.length);\n\n        // Overflow test\n        require(_delay <= 10**18);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\n        require(!p.paid);\n        require(!p.canceled);\n\n        p.securityGuardDelay += _delay;\n        p.earliestPayTime += _delay;\n    }\n\n////////\n// Owner Interface\n///////\n\n    /// @notice `onlyOwner` Cancel a payment all together\n    /// @param _idPayment ID of the payment to be canceled.\n    function cancelPayment(uint _idPayment) onlyOwner external {\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n\n        require(!p.canceled);\n        require(!p.paid);\n\n        p.canceled = true;\n        emit PaymentCanceled(_idPayment);\n    }\n\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\n    /// @param _spender The address of the contract being authorized/unauthorized\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\n        allowedSpenders[_spender] = _authorize;\n        emit SpenderAuthorization(_spender, _authorize);\n    }\n\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\n    /// @param _newSecurityGuard Address of the new security guard\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\n        securityGuard = _newSecurityGuard;\n    }\n\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\n    ///  lower than `absoluteMinTimeLock`\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in miliseconds;\n    ///  pending payments maintain their `earliestPayTime`\n    function setTimelock(uint _newTimeLock) onlyOwner external {\n        require(_newTimeLock >= absoluteMinTimeLock);\n        timeLock = _newTimeLock;\n    }\n\n    /// @notice `onlyOwner` Changes the maximum number of miliseconds\n    /// `securityGuard` can delay a payment\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\n    ///  `securityGuard` can delay the payment's execution in total\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n    // for overidding during testing\n    function _getTime() internal view returns (uint) {\n        return now;\n    }\n}",
        "pragma solidity ^0.4.19;\n\n\n/**\n * @title ERC20\n * @dev A standard interface for tokens.\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20 {\n  \n    /// @dev Returns the total token supply\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @dev Returns the account balance of the account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @dev Transfers _value number of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Transfers _value number of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n",
        "pragma solidity ^0.4.19;\n/*\n    Copyright 2016, Jordi Baylina\n    Contributor: Adrià Massanet <adria@codecontext.io>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"./Owned.sol\";\nimport \"./ERC20.sol\";\n\n\n/// @dev `Escapable` is a base level contract built off of the `Owned`\n///  contract; it creates an escape hatch function that can be called in an\n///  emergency that will allow designated addresses to send any ether or tokens\n///  held in the contract to an `escapeHatchDestination` as long as they were\n///  not blacklisted\ncontract Escapable is Owned {\n    address public escapeHatchCaller;\n    address public escapeHatchDestination;\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\n        escapeHatchCaller = _escapeHatchCaller;\n        escapeHatchDestination = _escapeHatchDestination;\n    }\n\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\n    ///  are the only addresses that can call a function with this modifier\n    modifier onlyEscapeHatchCallerOrOwner {\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\n        _;\n    }\n\n    /// @notice Creates the blacklist of tokens that are not able to be taken\n    ///  out of the contract; can only be done at the deployment, and the logic\n    ///  to add to the blacklist will be in the constructor of a child contract\n    /// @param _token the token contract address that is to be blacklisted \n    function blacklistEscapeToken(address _token) internal {\n        escapeBlacklist[_token] = true;\n        EscapeHatchBlackistedToken(_token);\n    }\n\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\n    /// @param _token the token address being queried\n    /// @return False if `_token` is in the blacklist and can't be taken out of\n    ///  the contract via the `escapeHatch()`\n    function isTokenEscapable(address _token) view public returns (bool) {\n        return !escapeBlacklist[_token];\n    }\n\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\n    /// security issue is uncovered or something unexpected happened\n    /// @param _token to transfer, use 0x0 for ether\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \n        require(escapeBlacklist[_token]==false);\n\n        uint256 balance;\n\n        /// @dev Logic for ether\n        if (_token == 0x0) {\n            balance = this.balance;\n            escapeHatchDestination.transfer(balance);\n            EscapeHatchCalled(_token, balance);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        balance = token.balanceOf(this);\n        require(token.transfer(escapeHatchDestination, balance));\n        EscapeHatchCalled(_token, balance);\n    }\n\n    /// @notice Changes the address assigned to call `escapeHatch()`\n    /// @param _newEscapeHatchCaller The address of a trusted account or\n    ///  contract to call `escapeHatch()` to send the value in this contract to\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\n        escapeHatchCaller = _newEscapeHatchCaller;\n    }\n\n    event EscapeHatchBlackistedToken(address token);\n    event EscapeHatchCalled(address token, uint amount);\n}\n",
        "pragma solidity ^0.4.19;\n\n\n/// @title Owned\n/// @author Adrià Massanet <adria@codecontext.io>\n/// @notice The Owned contract has an owner address, and provides basic \n///  authorization control functions, this simplifies & the implementation of\n///  user permissions; this contract has three work flows for a change in\n///  ownership, the first requires the new owner to validate that they have the\n///  ability to accept ownership, the second allows the ownership to be\n///  directly transfered without requiring acceptance, and the third allows for\n///  the ownership to be removed to allow for decentralization \ncontract Owned {\n\n    address public owner;\n    address public newOwnerCandidate;\n\n    event OwnershipRequested(address indexed by, address indexed to);\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event OwnershipRemoved();\n\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\n    ///  called by the `newOwnerCandidate`\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\n    ///  new owner\n    /// @param _newOwnerCandidate The address being proposed as the new owner\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\n        newOwnerCandidate = _newOwnerCandidate;\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n    }\n\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\n    ///  transfer of ownership\n    function acceptOwnership() public {\n        require(msg.sender == newOwnerCandidate);\n\n        address oldOwner = owner;\n        owner = newOwnerCandidate;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\n    ///  be called and it will immediately assign ownership to the `newOwner`\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner\n    function changeOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n\n        address oldOwner = owner;\n        owner = _newOwner;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\n    ///  be called and it will immediately assign ownership to the 0x0 address;\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\n    /// @notice Decentralizes the contract, this operation cannot be undone \n    /// @param _dac `0xdac` has to be entered for this function to work\n    function removeOwnership(address _dac) public onlyOwner {\n        require(_dac == 0xdac);\n        owner = 0x0;\n        newOwnerCandidate = 0x0;\n        OwnershipRemoved();     \n    }\n} \n",
        "pragma solidity ^0.4.21;\n\nimport \"giveth-common-contracts/contracts/Owned.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}",
        "pragma solidity ^0.4.18;\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n",
        "pragma solidity ^0.4.18;\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./Controlled.sol\";\nimport \"./TokenController.sol\";\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount) return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n\n           if (_amount == 0) {\n               return true;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           if (previousBalanceFrom < _amount) {\n               return false;\n           }\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () public payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n",
        "pragma solidity ^0.4.18;\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n}\n"
      ]
    }
  }
}