{
  "contract_name": "GivethBridge",
  "networks": {
    "9999": {
      "abi": [
        {
          "constant": true,
          "inputs": [],
          "name": "maxSecurityGuardDelay",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "token",
              "type": "address"
            },
            {
              "name": "accepted",
              "type": "bool"
            }
          ],
          "name": "whitelistToken",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "giver",
              "type": "address"
            },
            {
              "name": "receiverId",
              "type": "uint64"
            },
            {
              "name": "token",
              "type": "address"
            },
            {
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "donateAndCreateGiver",
          "outputs": [],
          "payable": true,
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_token",
              "type": "address"
            },
            {
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "escapeFunds",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newTimeLock",
              "type": "uint256"
            }
          ],
          "name": "setTimelock",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "escapeHatchCaller",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "name": "changeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "giverId",
              "type": "uint64"
            },
            {
              "name": "receiverId",
              "type": "uint64"
            },
            {
              "name": "token",
              "type": "address"
            },
            {
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "name": "donate",
          "outputs": [],
          "payable": true,
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_dac",
              "type": "address"
            }
          ],
          "name": "removeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "numberOfAuthorizedPayments",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newOwnerCandidate",
              "type": "address"
            }
          ],
          "name": "proposeOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_spender",
              "type": "address"
            },
            {
              "name": "_authorize",
              "type": "bool"
            }
          ],
          "name": "authorizeSpender",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [],
          "name": "acceptOwnership",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_idPayment",
              "type": "uint256"
            }
          ],
          "name": "cancelPayment",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_idPayment",
              "type": "uint256"
            },
            {
              "name": "_delay",
              "type": "uint256"
            }
          ],
          "name": "delayPayment",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "isTokenEscapable",
          "outputs": [
            {
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "giver",
              "type": "address"
            },
            {
              "name": "receiverId",
              "type": "uint64"
            }
          ],
          "name": "donateAndCreateGiver",
          "outputs": [],
          "payable": true,
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_idPayment",
              "type": "uint256"
            }
          ],
          "name": "collectAuthorizedPayment",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "authorizedPayments",
          "outputs": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "reference",
              "type": "bytes32"
            },
            {
              "name": "spender",
              "type": "address"
            },
            {
              "name": "earliestPayTime",
              "type": "uint256"
            },
            {
              "name": "canceled",
              "type": "bool"
            },
            {
              "name": "paid",
              "type": "bool"
            },
            {
              "name": "recipient",
              "type": "address"
            },
            {
              "name": "token",
              "type": "address"
            },
            {
              "name": "amount",
              "type": "uint256"
            },
            {
              "name": "securityGuardDelay",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "escapeHatch",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "securityGuard",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newSecurityGuard",
              "type": "address"
            }
          ],
          "name": "setSecurityGuard",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "giverId",
              "type": "uint64"
            },
            {
              "name": "receiverId",
              "type": "uint64"
            }
          ],
          "name": "donate",
          "outputs": [],
          "payable": true,
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "timeLock",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "newOwnerCandidate",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_newEscapeHatchCaller",
              "type": "address"
            }
          ],
          "name": "changeHatchEscapeCaller",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "name": "allowedSpenders",
          "outputs": [
            {
              "name": "",
              "type": "bool"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_maxSecurityGuardDelay",
              "type": "uint256"
            }
          ],
          "name": "setMaxSecurityGuardDelay",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "absoluteMinTimeLock",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "constant": false,
          "inputs": [
            {
              "name": "_name",
              "type": "string"
            },
            {
              "name": "_reference",
              "type": "bytes32"
            },
            {
              "name": "_recipient",
              "type": "address"
            },
            {
              "name": "_token",
              "type": "address"
            },
            {
              "name": "_amount",
              "type": "uint256"
            },
            {
              "name": "_paymentDelay",
              "type": "uint256"
            }
          ],
          "name": "authorizePayment",
          "outputs": [
            {
              "name": "",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "constant": true,
          "inputs": [],
          "name": "escapeHatchDestination",
          "outputs": [
            {
              "name": "",
              "type": "address"
            }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "name": "_escapeHatchCaller",
              "type": "address"
            },
            {
              "name": "_escapeHatchDestination",
              "type": "address"
            },
            {
              "name": "_absoluteMinTimeLock",
              "type": "uint256"
            },
            {
              "name": "_timeLock",
              "type": "uint256"
            },
            {
              "name": "_securityGuard",
              "type": "address"
            },
            {
              "name": "_maxSecurityGuardDelay",
              "type": "uint256"
            }
          ],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "giverId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "name": "receiverId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Donate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "giver",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "receiverId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "DonateAndCreateGiver",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "EscapeFundsCalled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "idPayment",
              "type": "uint256"
            },
            {
              "indexed": true,
              "name": "recipient",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "reference",
              "type": "bytes32"
            }
          ],
          "name": "PaymentAuthorized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "idPayment",
              "type": "uint256"
            },
            {
              "indexed": true,
              "name": "recipient",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            }
          ],
          "name": "PaymentExecuted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "idPayment",
              "type": "uint256"
            }
          ],
          "name": "PaymentCanceled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "authorized",
              "type": "bool"
            }
          ],
          "name": "SpenderAuthorization",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "Pause",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "Unpause",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            }
          ],
          "name": "EscapeHatchBlackistedToken",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "EscapeHatchCalled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "by",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipRequested",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "OwnershipRemoved",
          "type": "event"
        }
      ],
      "solc_version": "0.4.21+commit.dfe3193c",
      "optimizer_enabled": 200,
      "bytecode": "",
      "runtime_bytecode": "0x60606040526004361061019d5763ffffffff60e060020a6000350416630b2e742381146101a25780630ffb1d8b146101c75780631870c10f146101ed5780631b28591c146102185780631e891c0a1461023a5780631f6eb6e7146102505780632af4c31e1461027f5780633f4ba83a1461029e5780634c4316c7146102b15780635c975abb146102db578063666a34271461030257806368b8c5a114610321578063710bf32214610334578063793c0fd41461035357806379ba5097146103775780638422927d1461038a5780638456cb59146103a0578063846a5dde146103b3578063892db057146103cc5780638da5cb5b146103eb57806391f5c3a8146103fe57806392e4b8a41461041f578063a0927a6a14610435578063a142d60814610519578063b2ca3ec414610538578063bb2a51d11461054b578063bde60ac91461056a578063d085835a14610585578063d091b55014610598578063d836fbe8146105ab578063d8528af0146105ca578063da4793ac146105e9578063ea8a66c7146105ff578063f37b74ca14610612578063f5b612301461064c575b600080fd5b34156101ad57600080fd5b6101b561065f565b60405190815260200160405180910390f35b34156101d257600080fd5b6101eb600160a060020a03600435166024351515610665565b005b6101eb600160a060020a0360043581169067ffffffffffffffff6024351690604435166064356106bb565b341561022357600080fd5b6101eb600160a060020a036004351660243561076f565b341561024557600080fd5b6101eb6004356108fd565b341561025b57600080fd5b61026361092c565b604051600160a060020a03909116815260200160405180910390f35b341561028a57600080fd5b6101eb600160a060020a036004351661093b565b34156102a957600080fd5b6101eb6109cf565b6101eb67ffffffffffffffff60043581169060243516600160a060020a0360443516606435610a33565b34156102e657600080fd5b6102ee610ae8565b604051901515815260200160405180910390f35b341561030d57600080fd5b6101eb600160a060020a0360043516610af1565b341561032c57600080fd5b6101b5610b6e565b341561033f57600080fd5b6101eb600160a060020a0360043516610b75565b341561035e57600080fd5b6101eb600160a060020a03600435166024351515610be6565b341561038257600080fd5b6101eb610c60565b341561039557600080fd5b6101eb600435610ce0565b34156103ab57600080fd5b6101eb610d94565b34156103be57600080fd5b6101eb600435602435610dfa565b34156103d757600080fd5b6102ee600160a060020a0360043516610eb0565b34156103f657600080fd5b610263610ecf565b6101eb600160a060020a036004351667ffffffffffffffff60243516610ede565b341561042a57600080fd5b6101eb600435610eef565b341561044057600080fd5b61044b600435611127565b604051602081018a9052600160a060020a03808a16604083015260608201899052871515608083015286151560a083015285811660c0830152841660e082015261010081018390526101208101829052610140808252819081018c818151815260200191508051906020019080838360005b838110156104d55780820151838201526020016104bd565b50505050905090810190601f1680156105025780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b341561052457600080fd5b6101eb600160a060020a036004351661123b565b341561054357600080fd5b61026361145c565b341561055657600080fd5b6101eb600160a060020a036004351661146b565b6101eb67ffffffffffffffff600435811690602435166114a8565b341561059057600080fd5b6101b56114b5565b34156105a357600080fd5b6102636114bb565b34156105b657600080fd5b6101eb600160a060020a03600435166114ca565b34156105d557600080fd5b6102ee600160a060020a0360043516611522565b34156105f457600080fd5b6101eb600435611537565b341561060a57600080fd5b6101b5611557565b341561061d57600080fd5b6101b5602460048035828101929101359035600160a060020a036044358116906064351660843560a43561155d565b341561065757600080fd5b61026361170f565b600a5481565b60055460ff161561067557600080fd5b60005433600160a060020a0390811691161461069057600080fd5b600160a060020a03919091166000908152600c60205260409020805460ff1916911515919091179055565b60055460009060ff16156106ce57600080fd5b600160a060020a03851615156106e357600080fd5b67ffffffffffffffff841615156106f957600080fd5b610703838361171e565b90507f300ed237d4114d1c2df9984e698721646d6c45633d6c1c5430450cdecf61571d85858584604051600160a060020a03948516815267ffffffffffffffff909316602084015292166040808301919091526060820192909252608001905180910390a15050505050565b60025460009033600160a060020a039081169116148061079d575060005433600160a060020a039081169116145b15156107a857600080fd5b600160a060020a038316151561083457600354600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156107eb57600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a16108f8565b506003548290600160a060020a038083169163a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561089157600080fd5b5af1151561089e57600080fd5b5050506040518051905015156108b357600080fd5b7f4ccddcd1a4e33721aee316370fb3e014294985be0755a68c88009b31e1dc4ae38383604051600160a060020a03909216825260208201526040908101905180910390a15b505050565b60005433600160a060020a0390811691161461091857600080fd5b60085481101561092757600080fd5b600955565b600254600160a060020a031681565b6000805433600160a060020a0390811691161461095757600080fd5b600160a060020a038216151561096c57600080fd5b5060008054600160a060020a03838116600160a060020a031980841691909117938490556001805490911690559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005433600160a060020a039081169116146109ea57600080fd5b60055460ff1615156109fb57600080fd5b6005805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60055460009060ff1615610a4657600080fd5b67ffffffffffffffff85161515610a5c57600080fd5b67ffffffffffffffff84161515610a7257600080fd5b610a7c838361171e565b90507fc77b8feedf86922981aed41179f4a071d80467c7f17c5c13837269e363ac545b8585858460405167ffffffffffffffff9485168152929093166020830152600160a060020a03166040808301919091526060820192909252608001905180910390a15050505050565b60055460ff1681565b60005433600160a060020a03908116911614610b0c57600080fd5b610dac600160a060020a03821614610b2357600080fd5b60008054600160a060020a03199081169091556001805490911690557f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b6006545b90565b60005433600160a060020a03908116911614610b9057600080fd5b60018054600160a060020a031916600160a060020a0383811691909117918290559081169033167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b60005433600160a060020a03908116911614610c0157600080fd5b600160a060020a0382166000818152600b602052604090819020805460ff19168415151790557f801f568efbc3346a6ae3d0c3eb335a30d64e0d3cf08f1c39626d62cd5c82728190839051901515815260200160405180910390a25050565b60015460009033600160a060020a03908116911614610c7e57600080fd5b506000805460018054600160a060020a0319808416600160a060020a03838116919091179586905591169091559081169116817f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000805433600160a060020a03908116911614610cfc57600080fd5b6006548210610d0a57600080fd5b6006805483908110610d1857fe5b60009182526020909120600890910201600481015490915060ff1615610d3d57600080fd5b6004810154610100900460ff1615610d5457600080fd5b60048101805460ff19166001179055817ffdf197ed54809861dafe0b4d391843652730ac67274c1e9e46db7687dccaa30160405160405180910390a25050565b60005433600160a060020a03908116911614610daf57600080fd5b60055460ff1615610dbf57600080fd5b6005805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60075460009033600160a060020a03908116911614610e1857600080fd5b6006548310610e2657600080fd5b670de0b6b3a7640000821115610e3b57600080fd5b6006805484908110610e4957fe5b90600052602060002090600802019050600a548282600701540111151515610e7057600080fd5b6004810154610100900460ff1615610e8757600080fd5b600481015460ff1615610e9957600080fd5b600781018054830190556003018054909101905550565b600160a060020a031660009081526004602052604090205460ff161590565b600054600160a060020a031681565b610eeb82826000806106bb565b5050565b60055460009060ff1615610f0257600080fd5b6006548210610f1057600080fd5b6006805483908110610f1e57fe5b6000918252602090912060046008909202019081015490915033600160a060020a03908116620100009092041614610f5557600080fd5b6002810154600160a060020a03166000908152600b602052604090205460ff161515610f8057600080fd5b8060030154610f8d6117ff565b1015610f9857600080fd5b600481015460ff1615610faa57600080fd5b6004810154610100900460ff1615610fc157600080fd5b60048101805461ff0019166101001790556005810154600160a060020a0316151561102d576004810154600682015462010000909104600160a060020a0316906108fc81150290604051600060405180830381858888f19350505050151561102857600080fd5b6110bb565b600581015460048201546006830154600160a060020a039283169263a9059cbb92620100009004169060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561109957600080fd5b5af115156110a657600080fd5b5050506040518051905015156110bb57600080fd5b600481015460068201546005830154600160a060020a036201000090930483169285927f354f3c0c8efabe1a1a07cf222842b008ef284ac185e63bdf8245be8cd2d97f5192909116604051918252600160a060020a031660208201526040908101905180910390a35050565b600680548290811061113557fe5b9060005260206000209060080201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505060018301546002840154600385015460048601546005870154600688015460079098015496979496600160a060020a039485169650929460ff80841695610100850490911694620100009094048116939216918a565b600254600090819033600160a060020a039081169116148061126b575060005433600160a060020a039081169116145b151561127657600080fd5b600160a060020a03831660009081526004602052604090205460ff161561129c57600080fd5b600160a060020a038316151561132e57600354600160a060020a033081163193501682156108fc0283604051600060405180830381858888f1935050505015156112e557600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a16108f8565b5081600160a060020a0381166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561137e57600080fd5b5af1151561138b57600080fd5b5050506040518051600354909350600160a060020a03808416925063a9059cbb91168460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113f157600080fd5b5af115156113fe57600080fd5b50505060405180519050151561141357600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051600160a060020a03909216825260208201526040908101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a0390811691161461148657600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b610eeb8282600080610a33565b60095481565b600154600160a060020a031681565b60025433600160a060020a03908116911614806114f5575060005433600160a060020a039081169116145b151561150057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600b6020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461155257600080fd5b600a55565b60085481565b6005546000908190819060ff161561157457600080fd5b600160a060020a0333166000908152600b602052604090205460ff16151561159b57600080fd5b60068054925082906115b09060018301611803565b5060068054839081106115bf57fe5b60009182526020909120600890910201600281018054600160a060020a03191633600160a060020a03161790559050670de0b6b3a764000084111561160357600080fd5b60095484101561161e576009546116186117ff565b01611629565b836116276117ff565b015b600382015560048101805475ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a038a160217905560068101859055611671818b8b61182f565b5060018101889055600581018054600160a060020a031916600160a060020a038881169190911791829055600483015460068401546201000090910482169285927fd11935115aa93b9f1f616d0d7702f4593572daa610390123241b3785430281c49291168c604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a35098975050505050505050565b600354600160a060020a031681565b600160a060020a0382166000908152600c602052604081205460ff16151561174557600080fd5b5080600160a060020a038316151561175a5750345b6000811161176757600080fd5b600160a060020a038316156117f95782600160a060020a03166323b872dd33308460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156117d757600080fd5b5af115156117e457600080fd5b5050506040518051905015156117f957600080fd5b92915050565b4290565b8154818355818115116108f8576008028160080283600052602060002091820191016108f891906118ad565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106118705782800160ff1982351617855561189d565b8280016001018555821561189d579182015b8281111561189d578235825591602001919060010190611882565b506118a992915061192d565b5090565b610b7291905b808211156118a95760006118c78282611947565b50600060018201819055600282018054600160a060020a03199081169091556003830182905560048301805475ffffffffffffffffffffffffffffffffffffffffffff1916905560058301805490911690556006820181905560078201556008016118b3565b610b7291905b808211156118a95760008155600101611933565b50805460018160011615610100020316600290046000825580601f1061196d575061198b565b601f01602090049060005260206000209081019061198b919061192d565b505600a165627a7a72305820cb45d5da542d800123ae090d58712c67dd5f493902e5ffdb7bb483bcc3a4313b0029",
      "updated_at": 1524749797929,
      "source_map": "1245:5921:1:-;;;268:26:3;;;-1:-1:-1;;268:26:3;;;2711:487:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:5:7;:18;;-1:-1:-1;;;;;1001:10:7;993:18;;-1:-1:-1;;;;;;993:18:7;;;;;;2101:17:6;:38;;;;;;;;;;;;;;;2149:22;:48;;;;;;;;;;;;;;;4837:19:4;:42;;;;4889:8;:20;;;;-1:-1:-1;;4919:13:4;:30;;;;;;;;;;;;;;;;;4959:21;:46;;;;3143:17:1;;:14;2711:487;3143:17;;:24;;-1:-1:-1;;3143:24:1;993:18:7;3143:24:1;;;1245:5921;;;;;;",
      "source_map_runtime": "1245:5921:1:-;;;;;;;;;-1:-1:-1;;;1245:5921:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2458:33:4;;;;;;;;;;;;;;;;;;;;;;;;;;;5885:136:1;;;;;;;;;;-1:-1:-1;;;;;5885:136:1;;;;;;;;;;;4258:317;;-1:-1:-1;;;;;4258:317:1;;;;;;;;;;;;;;;;;6287:479;;;;;;;;;;-1:-1:-1;;;;;6287:479:1;;;;;;;10425:153:4;;;;;;;;;;;;;;1181:32:6;;;;;;;;;;;;;;;-1:-1:-1;;;;;1181:32:6;;;;;;;;;;;;;;2422:246:7;;;;;;;;;;-1:-1:-1;;;;;2422:246:7;;;;;912:102:3;;;;;;;;;;;;5585:294:1;;;;;;;;;;;-1:-1:-1;;;;;5585:294:1;;;;;;;268:26:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3062:182:7;;;;;;;;;;-1:-1:-1;;;;;3062:182:7;;;;;5221:114:4;;;;;;;;;;;;1585:185:7;;;;;;;;;;-1:-1:-1;;;;;1585:185:7;;;;;9706:192:4;;;;;;;;;;-1:-1:-1;;;;;9706:192:4;;;;;;;;;1882:242:7;;;;;;;;;;;;9148:312:4;;;;;;;;;;;;;;724:100:3;;;;;;;;;;;;8514:473:4;;;;;;;;;;;;;;;;3215:117:6;;;;;;;;;;-1:-1:-1;;;;;3215:117:6;;;;;638:20:7;;;;;;;;;;;;3669:143:1;;-1:-1:-1;;;;;3669:143:1;;;;;;;;;7346:902:4;;;;;;;;;;;;;;2319:35;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2319:35:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2319:35:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:611:6;;;;;;;;;;-1:-1:-1;;;;;3540:611:6;;;;;2361:28:4;;;;;;;;;;;;10035:122;;;;;;;;;;-1:-1:-1;;;;;10035:122:4;;;;;5021:118:1;;;;;;;;;;;;;2432:20:4;;;;;;;;;;;;664:32:7;;;;;;;;;;;;4520:158:6;;;;;;;;;;-1:-1:-1;;;;;4520:158:6;;;;;2611:48:4;;;;;;;;;;-1:-1:-1;;;;;2611:48:4;;;;;10842:145;;;;;;;;;;;;;;2395:31;;;;;;;;;;;;5914:1195;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5914:1195:4;;;;;;;;;;;;;;1219:37:6;;;;;;;;;;;;2458:33:4;;;;:::o;5885:136:1:-;446:6:3;;;;445:7;437:16;;;;;;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;5982:21:1;;;;;;;;:14;:21;;;;;:32;;-1:-1:-1;;5982:32:1;;;;;;;;;;5885:136::o;4258:317::-;446:6:3;;4453:11:1;;446:6:3;;445:7;437:16;;;;;;-1:-1:-1;;;;;4398:10:1;;;;4390:19;;;;;;4427:15;;;;;4419:24;;;;;;4467:32;4484:5;4491:7;4467:16;:32::i;:::-;4453:46;;4514:54;4535:5;4542:10;4554:5;4561:6;4514:54;;-1:-1:-1;;;;;4514:54:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4258:317;;;;;:::o;6287:479::-;2431:17:6;;6617:11:1;;2417:10:6;-1:-1:-1;;;;;2417:31:6;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:6;;2452:10;-1:-1:-1;;;;;2452:19:6;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;6423:11:1;;;6419:155;;;6450:22;;-1:-1:-1;;;;;6450:22:1;:40;;;;6482:7;6450:40;;;;;;;;;;;;;;;;;;;;;;;;;;6509:34;6527:6;6535:7;6509:34;;-1:-1:-1;;;;;6509:34:1;;;;;;;;;;;;;;;;;;;;6557:7;;6419:155;-1:-1:-1;6677:22:1;;6637:6;;-1:-1:-1;;;;;6662:14:1;;;;;;6677:22;6701:7;6662:47;;-1:-1:-1;;;6662:47:1;;;;;;-1:-1:-1;;;;;6662:47:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6654:56;;;;;;;;6725:34;6743:6;6751:7;6725:34;;-1:-1:-1;;;;;6725:34:1;;;;;;;;;;;;;;;;;;;;2483:1:6;6287:479:1;;;:::o;10425:153:4:-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;10518:19:4;;10502:35;;;10494:44;;;;;;10548:8;:23;10425:153::o;1181:32:6:-;;;-1:-1:-1;;;;;1181:32:6;;:::o;2422:246:7:-;2529:16;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;2501:16:7;;;;2493:25;;;;;;-1:-1:-1;2548:5:7;;;-1:-1:-1;;;;;2563:17:7;;;-1:-1:-1;;;;;;2563:17:7;;;;;;;;;;;2548:5;2590:23;;;;;;;2548:5;;;;2655;2548;2624:37;;;;;;;;;;2422:246;;:::o;912:102:3:-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;614:6:3;;;;606:15;;;;;;;;969:6;:14;;-1:-1:-1;;969:14:3;;;998:9;;;;;;;;;;912:102::o;5585:294:1:-;446:6:3;;5769:11:1;;446:6:3;;445:7;437:16;;;;;;5712:12:1;;;;;5704:21;;;;;;5743:15;;;;;5735:24;;;;;;5783:32;5800:5;5807:7;5783:16;:32::i;:::-;5769:46;;5830:42;5837:7;5846:10;5858:5;5865:6;5830:42;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5830:42:1;;;;;;;;;;;;;;;;;;;;;;;;;5585:294;;;;;:::o;268:26:3:-;;;;;;:::o;3062:182:7:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;3144:5;-1:-1:-1;;;;;3136:13:7;;;3128:22;;;;;;3168:3;3160:11;;-1:-1:-1;;;;;;3160:11:7;;;;;;;3181:23;;;;;;;3214:18;;;;;;;;;;3062:182;:::o;5221:114:4:-;5303:18;:25;5221:114;;:::o;1585:185:7:-;1171:5;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;1666:17;:38;;-1:-1:-1;;;;;;1666:38:7;-1:-1:-1;;;;;1666:38:7;;;;;;;;;;;1745:17;;;;1733:10;1714:49;;;;;;;;;;;1585:185;:::o;9706:192:4:-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;-1:-1:-1;;;;;9796:25:4;;;;;;:15;:25;;;;;;;:38;;-1:-1:-1;;9796:38:4;;;;;;;9849:42;;9796:38;;9849:42;;;;;;;;;;;;;;;9706:192;;:::o;1882:242:7:-;1948:17;;1977:16;;1934:10;-1:-1:-1;;;;;1934:31:7;;;1948:17;;1934:31;1926:40;;;;;;-1:-1:-1;1996:5:7;;;;2019:17;;-1:-1:-1;;;;;;2011:25:7;;;-1:-1:-1;;;;;2019:17:7;;;2011:25;;;;;;;;2046:23;;;;;1996:5;;;;2111;1996;2080:37;;;;;;;;;;1882:242;:::o;9148:312:4:-;9275:17;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;9238:18:4;:25;9225:38;;9217:47;;;;;;9295:18;:30;;9314:10;;9295:30;;;;;;;;;;;;;;;;;;;9346:10;;;;9295:30;;-1:-1:-1;9346:10:4;;9345:11;9337:20;;;;;;9376:6;;;;;;;;;9375:7;9367:16;;;;;;9394:10;;;:17;;-1:-1:-1;;9394:17:4;9407:4;9394:17;;;9442:10;9426:27;;;;;;;;;;9148:312;;:::o;724:100:3:-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;446:6:3;;;;445:7;437:16;;;;;;782:6;:13;;-1:-1:-1;;782:13:3;791:4;782:13;;;810:7;;;;;;;;;;724:100::o;8514:473:4:-;3302:13;;8722:17;;3288:10;-1:-1:-1;;;;;3288:27:4;;;3302:13;;3288:27;3280:36;;;;;;8624:18;:25;8611:38;;8603:47;;;;;;8704:6;8694:16;;;8686:25;;;;;;8742:18;:30;;8761:10;;8742:30;;;;;;;;;;;;;;;;8722:50;;8824:21;;8814:6;8791:1;:20;;;:29;:54;;8783:63;;;;;;;;8865:6;;;;;;;;;8864:7;8856:16;;;;;;8891:10;;;;;;8890:11;8882:20;;;;;;8913;;;:30;;;;;;8953:17;;:27;;;;;;;-1:-1:-1;8514:473:4:o;3215:117:6:-;-1:-1:-1;;;;;3302:23:6;3278:4;3302:23;;;:15;:23;;;;;;;;3301:24;;3215:117::o;638:20:7:-;;;-1:-1:-1;;;;;638:20:7;;:::o;3669:143:1:-;3760:45;3781:5;3788:10;3800:1;3803;3760:20;:45::i;:::-;3669:143;;:::o;7346:902:4:-;446:6:3;;7566:17:4;;446:6:3;;445:7;437:16;;;;;;7529:18:4;:25;7516:38;;7508:47;;;;;;7586:18;:30;;7605:10;;7586:30;;;;;;;;;;;;;;7708:11;7586:30;;;;;7708:11;;;;7586:30;;-1:-1:-1;7694:10:4;-1:-1:-1;;;;;7694:25:4;;;7708:11;;;;;7694:25;7686:34;;;;;;7754:9;;;;-1:-1:-1;;;;;7754:9:4;7738:26;;;;:15;:26;;;;;;;;7730:35;;;;;;;;7797:1;:17;;;7783:10;:8;:10::i;:::-;:31;;7775:40;;;;;;7834:10;;;;;;7833:11;7825:20;;;;;;7864:6;;;;;;;;;7863:7;7855:16;;;;;;7923:6;;;:13;;-1:-1:-1;;7923:13:4;;;;;8012:7;;;;-1:-1:-1;;;;;8012:7:4;:12;8008:159;;;8040:11;;;;8061:8;;;;8040:11;;;;-1:-1:-1;;;;;8040:11:4;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8008:159;;;8115:7;;;;8133:11;;;;8146:8;;;;-1:-1:-1;;;;;8115:7:4;;;;8109:23;;8133:11;;;;;8109:46;;-1:-1:-1;;;8109:46:4;;;;;;-1:-1:-1;;;;;8109:46:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8101:55;;;;;;;;8210:11;;;;8223:8;;;;8233:7;;;;-1:-1:-1;;;;;8210:11:4;;;;;;;8198:10;;8182:59;;8223:8;;8233:7;8182:59;;;;;-1:-1:-1;;;;;8182:59:4;;;;;;;;;;;;;;;;7346:902;;:::o;2319:35::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2319:35:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2319:35:4;;;;-1:-1:-1;2319:35:4;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3540:611:6:-;2431:17;;3676:15;;;;2417:10;-1:-1:-1;;;;;2417:31:6;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:6;;2452:10;-1:-1:-1;;;;;2452:19:6;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;-1:-1:-1;;;;;3634:23:6;;;;;;:15;:23;;;;;;;;:30;3626:39;;;;;;-1:-1:-1;;;;;3739:13:6;;;3735:188;;;3804:22;;-1:-1:-1;;;;;3778:4:6;:12;;;;-1:-1:-1;3804:22:6;:40;;;;3778:12;3804:40;;;;;;;;;;;;;;;;;;;;;;;;;;3858:34;3876:6;3884:7;3858:34;;-1:-1:-1;;;;;3858:34:6;;;;;;;;;;;;;;;;;;;;3906:7;;3735:188;-1:-1:-1;3986:6:6;-1:-1:-1;;;;;4013:15:6;;;4029:4;4013:21;;-1:-1:-1;;;4013:21:6;;;;;;-1:-1:-1;;;;;4013:21:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4067:22;;4013:21;;-1:-1:-1;;;;;;4052:14:6;;;;-1:-1:-1;4052:14:6;;4067:22;4013:21;4052:47;;-1:-1:-1;;;4052:47:6;;;;;;-1:-1:-1;;;;;4052:47:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:56;;;;;;;;4110:34;4128:6;4136:7;4110:34;;-1:-1:-1;;;;;4110:34:6;;;;;;;;;;;;;;;;;;;;3540:611;;;:::o;2361:28:4:-;;;-1:-1:-1;;;;;2361:28:4;;:::o;10035:122::-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;10117:13:4;:33;;-1:-1:-1;;;;;;10117:33:4;-1:-1:-1;;;;;10117:33:4;;;;;;;;;;10035:122::o;5021:118:1:-;5099:33;5106:7;5115:10;5127:1;5130;5099:6;:33::i;2432:20:4:-;;;;:::o;664:32:7:-;;;-1:-1:-1;;;;;664:32:7;;:::o;4520:158:6:-;2431:17;;2417:10;-1:-1:-1;;;;;2417:31:6;;;2431:17;;2417:31;;2416:56;;-1:-1:-1;2466:5:6;;2452:10;-1:-1:-1;;;;;2452:19:6;;;2466:5;;2452:19;2416:56;2407:66;;;;;;;;4630:17;:41;;-1:-1:-1;;;;;;4630:41:6;-1:-1:-1;;;;;4630:41:6;;;;;;;;;;4520:158::o;2611:48:4:-;;;;;;;;;;;;;;;:::o;10842:145::-;1171:5:7;;1157:10;-1:-1:-1;;;;;1157:19:7;;;1171:5;;1157:19;1148:29;;;;;;10934:21:4;:46;10842:145::o;2395:31::-;;;;:::o;5914:1195::-;446:6:3;;6129:4:4;;;;;;446:6:3;;445:7;437:16;;;;;;-1:-1:-1;;;;;6235:10:4;6219:27;;;;;:15;:27;;;;;;;;6211:36;;;;;;;;6274:18;:25;;;-1:-1:-1;6274:25:4;;6336:27;;;;;;:::i;:::-;-1:-1:-1;6453:18:4;:29;;6472:9;;6453:29;;;;;;;;;;;;;;;;;;;6492:9;;;:22;;-1:-1:-1;;;;;;6492:22:4;6504:10;-1:-1:-1;;;;;6492:22:4;;;;6453:29;-1:-1:-1;6581:6:4;6564:23;;;6556:32;;;;;;6717:8;;6700:13;:25;;:142;;6834:8;;6821:10;:8;:10::i;:::-;:21;6700:142;;;6773:13;6760:10;:8;:10::i;:::-;:26;6700:142;6680:17;;;:162;6852:11;;;:24;;-1:-1:-1;;6852:24:4;;-1:-1:-1;;;;;6852:24:4;;;;;;6886:8;;;:18;;;6914:14;6680:17;6923:5;;6914:14;:::i;:::-;-1:-1:-1;6938:11:4;;;:24;;;6972:7;;;:16;;-1:-1:-1;;;;;;6972:16:4;-1:-1:-1;;;;;6972:16:4;;;;;;;;;;;7032:11;;;;7045:8;;;;7032:11;;;;;;;7021:9;;7003:73;;7045:8;7055:7;6938:24;7003:73;;;;;-1:-1:-1;;;;;7003:73:4;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7093:9:4;5914:1195;-1:-1:-1;;;;;;;;5914:1195:4:o;1219:37:6:-;;;-1:-1:-1;;;;;1219:37:6;;:::o;6772:392:1:-;-1:-1:-1;;;;;6875:21:1;;6844:11;6875:21;;;:14;:21;;;;;;;;6867:30;;;;;;;;-1:-1:-1;6916:7:1;-1:-1:-1;;;;;6962:10:1;;;6958:59;;;-1:-1:-1;6997:9:1;6958:59;7044:1;7035:10;;7027:19;;;;;;-1:-1:-1;;;;;7061:10:1;;;7057:101;;7101:5;-1:-1:-1;;;;;7095:25:1;;7121:10;7133:4;7139:6;7095:51;;-1:-1:-1;;;7095:51:1;;;;;;-1:-1:-1;;;;;7095:51:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7087:60;;;;;;;;6772:392;;;;:::o;11030:76:4:-;11096:3;11030:76;:::o;1245:5921:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1245:5921:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1245:5921:1;;;-1:-1:-1;1245:5921:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1245:5921:1;;;;;;;;;;;;-1:-1:-1;;;;;;1245:5921:1;;;;;;;;;;;;;;;;;-1:-1:-1;;1245:5921:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o",
      "sources": [
        "./contracts/ForeignGivethBridge.sol",
        "./contracts/GivethBridge.sol",
        "./contracts/GivethBridgeMock.sol",
        "./contracts/lib/Pausable.sol",
        "./contracts/lib/Vault.sol",
        "giveth-common-contracts/contracts/ERC20.sol",
        "giveth-common-contracts/contracts/Escapable.sol",
        "giveth-common-contracts/contracts/Owned.sol",
        "lib/Pausable.sol",
        "minimetoken/contracts/Controlled.sol",
        "minimetoken/contracts/MiniMeToken.sol",
        "minimetoken/contracts/TokenController.sol"
      ],
      "sourceCodes": [
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"giveth-common-contracts/contracts/Escapable.sol\";\nimport \"minimetoken/contracts/MiniMeToken.sol\";\nimport \"lib/Pausable.sol\";\n\ncontract ForeignGivethBridge is Escapable, Pausable, TokenController {\n    // TODO: what happens when bridge shuts down? how do we transfer token mappings?\n\n    MiniMeTokenFactory public tokenFactory;\n    address public liquidPledging;\n\n    mapping(address => address) public tokenMapping;\n    mapping(address => address) public inverseTokenMapping;\n\n    event Deposit(address indexed sender, address token, uint amount, bytes32 homeTx, bytes data);\n    event Withdraw(address recipient, address token, uint amount);\n    event TokenAdded(address mainToken, address sideToken);\n\n    //== constructor\n\n    function ForeignGivethBridge(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination, \n        address _tokenFactory,\n        address _liquidPledging\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public \n    {\n        require(_tokenFactory != 0);\n        require(_liquidPledging != 0);\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        liquidPledging = _liquidPledging;\n    }\n\n    //== public methods\n\n    // TODO: specify withdraw address?\n    function withdraw(address sideToken, uint amount) whenNotPaused external {\n        address mainToken = inverseTokenMapping[sideToken];\n        require(mainToken != 0 || tokenMapping[0] == sideToken);\n\n        MiniMeToken(sideToken).destroyTokens(msg.sender, amount);\n\n        emit Withdraw(msg.sender, mainToken, amount);\n    }\n\n    function deposit(address sender, address mainToken, uint amount, bytes32 homeTx, bytes data) onlyOwner external {\n        address sideToken = tokenMapping[mainToken];\n        require(sideToken != 0);\n\n        MiniMeToken(sideToken).generateTokens(address(this), amount);\n\n        if (MiniMeToken(sideToken).allowance(address(this), liquidPledging) < amount) {\n            MiniMeToken(sideToken).approve(liquidPledging, uint(0 - 1));\n        }\n\n        require(liquidPledging.call(data));\n        emit Deposit(sender, mainToken, amount, homeTx, data);\n    }\n\n    function addToken(address mainToken, string tokenName, uint8 decimals, string tokenSymbol) onlyOwner external {\n        require(tokenMapping[mainToken] == 0);\n        MiniMeToken sideToken = new MiniMeToken(tokenFactory, 0x0, 0, tokenName, decimals, tokenSymbol, true);\n        sideToken.approve(liquidPledging, uint(0 - 1));\n        tokenMapping[mainToken] = address(sideToken);\n        inverseTokenMapping[address(sideToken)] = mainToken;\n        emit TokenAdded(mainToken, address(sideToken));\n    }\n\n////////////////\n// TokenController\n////////////////\n\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool) {\n        return false;\n    }\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n        return true;\n    }\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\n        return true;\n    }\n}",
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2017, RJ Ewing <perissology@protonmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"giveth-common-contracts/contracts/ERC20.sol\";\nimport \"./lib/Vault.sol\";\n\n// @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n// this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n// will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n// will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n// the dapp\ncontract GivethBridge is Vault {\n\n    mapping(address => bool) tokenWhitelist;\n\n    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);\n    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);\n    event EscapeFundsCalled(address token, uint amount);\n\n    //== constructor\n\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\n    ///  call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\n    ///  funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract in an emergency\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    /// @param _timeLock Initial number of seconds that payments are delayed\n    ///  after they are authorized (a security precaution)\n    /// @param _securityGuard Address that will be able to delay the payments\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\n    ///  the `securityGuard` functionality\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\n    ///   the payment if needed\n    function GivethBridge(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Vault(\n        _escapeHatchCaller,\n        _escapeHatchDestination,\n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public\n    {\n        tokenWhitelist[0] = true; // enable eth transfers\n    }\n\n    //== public methods\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {\n        donateAndCreateGiver(giver, receiverId, 0, 0);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giver != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit DonateAndCreateGiver(giver, receiverId, token, amount);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donate(uint64 giverId, uint64 receiverId) payable external {\n        donate(giverId, receiverId, 0, 0);\n    }\n\n    // @notice NOTICE: It is not recommened to call this function outside of the giveth dapp (giveth.io)\n    // this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation\n    // will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there\n    // will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in\n    // the dapp\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {\n        require(giverId != 0);\n        require(receiverId != 0);\n        uint amount = _receiveDonation(token, _amount);\n        emit Donate(giverId, receiverId, token, amount);\n    }\n\n    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {\n        tokenWhitelist[token] = accepted;\n    }\n\n    /// Transfer tokens/eth to the escapeHatchDestination.\n    /// Used as a safety mechanism to prevent the bridge from holding too much value\n    /// before being thoroughly battle-tested.\n    /// @param _token to transfer\n    /// @param _amount to transfer\n    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {\n        /// @dev Logic for ether\n        if (_token == 0) {\n            escapeHatchDestination.transfer(_amount);\n            emit EscapeFundsCalled(_token, _amount);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        require(token.transfer(escapeHatchDestination, _amount));\n        emit EscapeFundsCalled(_token, _amount);\n    }\n\n    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {\n        require(tokenWhitelist[token]);\n        amount = _amount;\n\n        // eth donation\n        if (token == 0) {\n            amount = msg.value;\n        }\n\n        require(amount > 0);\n\n        if (token != 0) {\n            require(ERC20(token).transferFrom(msg.sender, this, amount));\n        }\n    }\n}",
        "pragma solidity ^0.4.21;\n/*\n    Copyright 2017, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"./GivethBridge.sol\";\n\n/// @dev `GivethBridgeMock` allows for mocking up\n///  a `GivethBridge` contract with the added ability\n///  to manipulate the block time for testing purposes.\ncontract GivethBridgeMock is GivethBridge {\n\n    uint public mock_time;\n\n    function GivethBridgeMock(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) GivethBridge(\n        _escapeHatchCaller,\n        _escapeHatchDestination,\n        _absoluteMinTimeLock,\n        _timeLock,\n        _securityGuard,\n        _maxSecurityGuardDelay\n    ) public\n    {\n    }\n\n    /// @dev `_getTime` is a basic getter function for\n    ///  the mock_time parameter\n    function _getTime() internal view returns (uint) {\n        return mock_time;\n    }\n\n    /// @dev `setMockedTime` is a basic setter function for\n    ///  the mock_time parameter\n    /// @param _t This is the value to which the mocked time\n    ///  will be set.\n    function setMockedTime(uint _t) public {\n        mock_time = _t;\n    }\n}",
        "pragma solidity ^0.4.21;\n\nimport \"giveth-common-contracts/contracts/Owned.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}",
        "pragma solidity ^0.4.21;\n\n/*\n    Copyright 2016, Jordi Baylina, RJ Ewing\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title Vault Contract\n/// @author Jordi Baylina, RJ Ewing\n/// @notice This contract holds funds for Campaigns and automates payments. For\n///  this iteration the funds will come straight from the Giveth Multisig as a\n///  safety precaution, but once fully tested and optimized this contract will\n///  be a safe place to store funds equipped with optional variable time delays\n///  to allow for an optional escape hatch\n\nimport \"giveth-common-contracts/contracts/Escapable.sol\";\nimport \"./Pausable.sol\";\n\n/// @dev `Vault` is a higher level contract built off of the `Escapable`\n///  contract that holds funds for Campaigns and automates payments.\ncontract Vault is Escapable, Pausable {\n\n    /// @dev `Payment` is a public structure that describes the details of\n    ///  each payment making it easy to track the movement of funds\n    ///  transparently\n    struct Payment {\n        string name;     // What is the purpose of this payment\n        bytes32 reference;  // Reference of the payment.\n        address spender;        // Who is sending the funds\n        uint earliestPayTime;   // The earliest a payment can be made (Unix Time)\n        bool canceled;         // If True then the payment has been canceled\n        bool paid;              // If True then the payment has been paid\n        address recipient;      // Who is receiving the funds\n        address token;          // Token this payment represents\n        uint amount;            // The amount of wei sent in the payment\n        uint securityGuardDelay;// The miliseconds `securityGuard` can delay payment\n    }\n\n    Payment[] public authorizedPayments;\n\n    address public securityGuard;\n    uint public absoluteMinTimeLock;\n    uint public timeLock;\n    uint public maxSecurityGuardDelay;\n\n    /// @dev The white list of approved addresses allowed to set up && receive\n    ///  payments from this vault\n    mapping (address => bool) public allowedSpenders;\n\n    // @dev Events to make the payment movements easy to find on the blockchain\n    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);\n    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);\n    event PaymentCanceled(uint indexed idPayment);\n    event SpenderAuthorization(address indexed spender, bool authorized);\n\n    /// @dev The address assigned the role of `securityGuard` is the only\n    ///  addresses that can call a function with this modifier\n    modifier onlySecurityGuard { \n        require(msg.sender == securityGuard);\n        _;\n    }\n\n    /// @notice The Constructor creates the Vault on the blockchain\n    /// @param _escapeHatchCaller The address of a trusted account or contract to\n    ///  call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move\n    ///  funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract in an emergency\n    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can\n    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely\n    /// @param _timeLock Initial number of seconds that payments are delayed\n    ///  after they are authorized (a security precaution)\n    /// @param _securityGuard Address that will be able to delay the payments\n    ///  beyond the initial timelock requirements; can be set to 0x0 to remove\n    ///  the `securityGuard` functionality\n    /// @param _maxSecurityGuardDelay The maximum number of seconds in total\n    ///   that `securityGuard` can delay a payment so that the owner can cancel\n    ///   the payment if needed\n    function Vault(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination,\n        uint _absoluteMinTimeLock,\n        uint _timeLock,\n        address _securityGuard,\n        uint _maxSecurityGuardDelay\n    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public\n    {\n        absoluteMinTimeLock = _absoluteMinTimeLock;\n        timeLock = _timeLock;\n        securityGuard = _securityGuard;\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n/////////\n// Helper functions\n/////////\n\n    /// @notice States the total number of authorized payments in this contract\n    /// @return The number of payments ever authorized even if they were canceled\n    function numberOfAuthorizedPayments() public view returns (uint) {\n        return authorizedPayments.length;\n    }\n\n////////\n// Spender Interface\n////////\n\n    /// @notice only `allowedSpenders[]` Creates a new `Payment`\n    /// @param _name Brief description of the payment that is authorized\n    /// @param _reference External reference of the payment\n    /// @param _recipient Destination of the payment\n    /// @param _amount Amount to be paid in wei\n    /// @param _paymentDelay Number of miliseconds the payment is to be delayed, if\n    ///  this value is below `timeLock` then the `timeLock` determines the delay\n    /// @return The Payment ID number for the new authorized payment\n    function authorizePayment(\n        string _name,\n        bytes32 _reference,\n        address _recipient,\n        address _token,\n        uint _amount,\n        uint _paymentDelay\n    ) whenNotPaused external returns(uint) {\n\n        // Fail if you arent on the `allowedSpenders` white list\n        require(allowedSpenders[msg.sender]);\n        uint idPayment = authorizedPayments.length;       // Unique Payment ID\n        authorizedPayments.length++;\n\n        // The following lines fill out the payment struct\n        Payment storage p = authorizedPayments[idPayment];\n        p.spender = msg.sender;\n\n        // Overflow protection\n        require(_paymentDelay <= 10**18);\n\n        // Determines the earliest the recipient can receive payment (Unix time)\n        p.earliestPayTime = _paymentDelay >= timeLock ?\n                                _getTime() + _paymentDelay :\n                                _getTime() + timeLock;\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.name = _name;\n        p.reference = _reference;\n        p.token = _token;\n        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);\n        return idPayment;\n    }\n\n    /// @notice only `allowedSpenders[]` The recipient of a payment calls this\n    ///  function to send themselves the ether after the `earliestPayTime` has\n    ///  expired\n    /// @param _idPayment The payment ID to be executed\n    function collectAuthorizedPayment(uint _idPayment) whenNotPaused external {\n\n        // Check that the `_idPayment` has been added to the payments struct\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        // Checking for reasons not to execute the payment\n        require(msg.sender == p.recipient);\n        require(allowedSpenders[p.spender]);\n        require(_getTime() >= p.earliestPayTime);\n        require(!p.canceled);\n        require(!p.paid);\n        // if (this.balance < p.amount);\n\n        p.paid = true; // Set the payment to being paid\n\n        // Make the payment\n        if (p.token == 0) {\n            p.recipient.transfer(p.amount);\n        } else {\n            require(ERC20(p.token).transfer(p.recipient, p.amount));\n        }\n\n        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);\n    }\n\n/////////\n// SecurityGuard Interface\n/////////\n\n    /// @notice `onlySecurityGuard` Delays a payment for a set number of miliseconds\n    /// @param _idPayment ID of the payment to be delayed\n    /// @param _delay The number of miliseconds to delay the payment\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\n        require(_idPayment < authorizedPayments.length);\n\n        // Overflow test\n        require(_delay <= 10**18);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n        require(p.securityGuardDelay + _delay <= maxSecurityGuardDelay);\n        require(!p.paid);\n        require(!p.canceled);\n\n        p.securityGuardDelay += _delay;\n        p.earliestPayTime += _delay;\n    }\n\n////////\n// Owner Interface\n///////\n\n    /// @notice `onlyOwner` Cancel a payment all together\n    /// @param _idPayment ID of the payment to be canceled.\n    function cancelPayment(uint _idPayment) onlyOwner external {\n        require(_idPayment < authorizedPayments.length);\n\n        Payment storage p = authorizedPayments[_idPayment];\n\n\n        require(!p.canceled);\n        require(!p.paid);\n\n        p.canceled = true;\n        emit PaymentCanceled(_idPayment);\n    }\n\n    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list\n    /// @param _spender The address of the contract being authorized/unauthorized\n    /// @param _authorize `true` if authorizing and `false` if unauthorizing\n    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {\n        allowedSpenders[_spender] = _authorize;\n        emit SpenderAuthorization(_spender, _authorize);\n    }\n\n    /// @notice `onlyOwner` Sets the address of `securityGuard`\n    /// @param _newSecurityGuard Address of the new security guard\n    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {\n        securityGuard = _newSecurityGuard;\n    }\n\n    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be\n    ///  lower than `absoluteMinTimeLock`\n    /// @param _newTimeLock Sets the new minimum default `timeLock` in miliseconds;\n    ///  pending payments maintain their `earliestPayTime`\n    function setTimelock(uint _newTimeLock) onlyOwner external {\n        require(_newTimeLock >= absoluteMinTimeLock);\n        timeLock = _newTimeLock;\n    }\n\n    /// @notice `onlyOwner` Changes the maximum number of miliseconds\n    /// `securityGuard` can delay a payment\n    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that\n    ///  `securityGuard` can delay the payment's execution in total\n    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {\n        maxSecurityGuardDelay = _maxSecurityGuardDelay;\n    }\n\n    // for overidding during testing\n    function _getTime() internal view returns (uint) {\n        return now;\n    }\n}",
        "pragma solidity ^0.4.19;\n\n\n/**\n * @title ERC20\n * @dev A standard interface for tokens.\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20 {\n  \n    /// @dev Returns the total token supply\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @dev Returns the account balance of the account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @dev Transfers _value number of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Transfers _value number of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n",
        "pragma solidity ^0.4.19;\n/*\n    Copyright 2016, Jordi Baylina\n    Contributor: Adrià Massanet <adria@codecontext.io>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport \"./Owned.sol\";\nimport \"./ERC20.sol\";\n\n\n/// @dev `Escapable` is a base level contract built off of the `Owned`\n///  contract; it creates an escape hatch function that can be called in an\n///  emergency that will allow designated addresses to send any ether or tokens\n///  held in the contract to an `escapeHatchDestination` as long as they were\n///  not blacklisted\ncontract Escapable is Owned {\n    address public escapeHatchCaller;\n    address public escapeHatchDestination;\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\n        escapeHatchCaller = _escapeHatchCaller;\n        escapeHatchDestination = _escapeHatchDestination;\n    }\n\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\n    ///  are the only addresses that can call a function with this modifier\n    modifier onlyEscapeHatchCallerOrOwner {\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\n        _;\n    }\n\n    /// @notice Creates the blacklist of tokens that are not able to be taken\n    ///  out of the contract; can only be done at the deployment, and the logic\n    ///  to add to the blacklist will be in the constructor of a child contract\n    /// @param _token the token contract address that is to be blacklisted \n    function blacklistEscapeToken(address _token) internal {\n        escapeBlacklist[_token] = true;\n        EscapeHatchBlackistedToken(_token);\n    }\n\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\n    /// @param _token the token address being queried\n    /// @return False if `_token` is in the blacklist and can't be taken out of\n    ///  the contract via the `escapeHatch()`\n    function isTokenEscapable(address _token) view public returns (bool) {\n        return !escapeBlacklist[_token];\n    }\n\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\n    /// security issue is uncovered or something unexpected happened\n    /// @param _token to transfer, use 0x0 for ether\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \n        require(escapeBlacklist[_token]==false);\n\n        uint256 balance;\n\n        /// @dev Logic for ether\n        if (_token == 0x0) {\n            balance = this.balance;\n            escapeHatchDestination.transfer(balance);\n            EscapeHatchCalled(_token, balance);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        balance = token.balanceOf(this);\n        require(token.transfer(escapeHatchDestination, balance));\n        EscapeHatchCalled(_token, balance);\n    }\n\n    /// @notice Changes the address assigned to call `escapeHatch()`\n    /// @param _newEscapeHatchCaller The address of a trusted account or\n    ///  contract to call `escapeHatch()` to send the value in this contract to\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\n        escapeHatchCaller = _newEscapeHatchCaller;\n    }\n\n    event EscapeHatchBlackistedToken(address token);\n    event EscapeHatchCalled(address token, uint amount);\n}\n",
        "pragma solidity ^0.4.19;\n\n\n/// @title Owned\n/// @author Adrià Massanet <adria@codecontext.io>\n/// @notice The Owned contract has an owner address, and provides basic \n///  authorization control functions, this simplifies & the implementation of\n///  user permissions; this contract has three work flows for a change in\n///  ownership, the first requires the new owner to validate that they have the\n///  ability to accept ownership, the second allows the ownership to be\n///  directly transfered without requiring acceptance, and the third allows for\n///  the ownership to be removed to allow for decentralization \ncontract Owned {\n\n    address public owner;\n    address public newOwnerCandidate;\n\n    event OwnershipRequested(address indexed by, address indexed to);\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event OwnershipRemoved();\n\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\n    ///  called by the `newOwnerCandidate`\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\n    ///  new owner\n    /// @param _newOwnerCandidate The address being proposed as the new owner\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\n        newOwnerCandidate = _newOwnerCandidate;\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n    }\n\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\n    ///  transfer of ownership\n    function acceptOwnership() public {\n        require(msg.sender == newOwnerCandidate);\n\n        address oldOwner = owner;\n        owner = newOwnerCandidate;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\n    ///  be called and it will immediately assign ownership to the `newOwner`\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner\n    function changeOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n\n        address oldOwner = owner;\n        owner = _newOwner;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\n    ///  be called and it will immediately assign ownership to the 0x0 address;\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\n    /// @notice Decentralizes the contract, this operation cannot be undone \n    /// @param _dac `0xdac` has to be entered for this function to work\n    function removeOwnership(address _dac) public onlyOwner {\n        require(_dac == 0xdac);\n        owner = 0x0;\n        newOwnerCandidate = 0x0;\n        OwnershipRemoved();     \n    }\n} \n",
        "pragma solidity ^0.4.21;\n\nimport \"giveth-common-contracts/contracts/Owned.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}",
        "pragma solidity ^0.4.18;\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n",
        "pragma solidity ^0.4.18;\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./Controlled.sol\";\nimport \"./TokenController.sol\";\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount) return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n\n           if (_amount == 0) {\n               return true;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           if (previousBalanceFrom < _amount) {\n               return false;\n           }\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () public payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) public onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n",
        "pragma solidity ^0.4.18;\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n}\n"
      ]
    }
  }
}