{"version":3,"sources":["../src/ResponsiveMasonry.js"],"names":["DEFAULT_COLUMNS_COUNT","MasonryResponsive","props","state","columnsCount","handleResize","bind","handleRef","updateColumnsCount","window","addEventListener","removeEventListener","breakPoints","Object","keys","columnsCountBreakPoints","sort","a","b","containerWidth","container","offsetWidth","getSortedBreakPoints","length","forEach","breakPoint","setState","ref","className","Children","map","children","child","index","cloneElement","key","Component","propTypes","oneOfType","arrayOf","node","isRequired","object","string","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,wBAAwB,CAA9B;;IAEMC,iB;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,oBAAcJ;AADH,KAAb;;AAIA,UAAKK,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,OAAjB;AARiB;AASlB;;;;wCAEmB;AAClB,WAAKE,kBAAL;AACAC,aAAOC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,YAAvC,EAFkB,CAEmC;AACtD;;;2CAEsB;AACrBI,aAAOE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKN,YAA1C,EADqB,CACmC;AACzD;;;2CAEsB;AACrB,UAAMO,cAAcC,OAAOC,IAAP,CAAY,KAAKZ,KAAL,CAAWa,uBAAvB,CAApB;AACA,aAAOH,YAAYI,IAAZ,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,IAAIC,CAAd;AAAA,OAAjB,CAAP;AACD;;;yCAEoB;AAAA,UACZH,uBADY,GACe,KAAKb,KADpB,CACZa,uBADY;;AAEnB,UAAMI,iBAAiB,KAAKC,SAAL,CAAeC,WAAtC;AACA,UAAMT,cAAc,KAAKU,oBAAL,EAApB;AACA,UAAIlB,eACFQ,YAAYW,MAAZ,GAAqB,CAArB,GACIR,wBAAwBH,YAAY,CAAZ,CAAxB,CADJ,GAEIZ,qBAHN;;AAKAY,kBAAYY,OAAZ,CAAoB,sBAAc;AAChC,YAAIC,aAAaN,cAAjB,EAAiC;AAC/Bf,yBAAeW,wBAAwBU,UAAxB,CAAf;AACD;AACF,OAJD;;AAMA,UAAIrB,gBAAgBA,iBAAiB,KAAKD,KAAL,CAAWC,YAAhD,EAA8D;AAC5D,aAAKsB,QAAL,CAAc,EAACtB,0BAAD,EAAd;AACD;AACF;;;mCAEc;AACb,WAAKI,kBAAL;AACD;;;8BAESmB,G,EAAK;AACb,UAAI,CAAC,KAAKP,SAAV,EAAqB,KAAKA,SAAL,GAAiBO,GAAjB;AACtB;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA,UAAK,KAAK,KAAKpB,SAAf,EAA0B,WAAW,KAAKL,KAAL,CAAW0B,SAAhD;AACG,wBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAK5B,KAAL,CAAW6B,QAA9B,EAAwC,UAACC,KAAD,EAAQC,KAAR;AAAA,iBACvC,gBAAMC,YAAN,CAAmBF,KAAnB,EAA0B;AACxBG,iBAAKF,KADmB;AAExB7B,0BAAc,OAAKD,KAAL,CAAWC;AAFD,WAA1B,CADuC;AAAA,SAAxC;AADH,OADF;AAUD;;;;EAjE6B,gBAAMgC,S;;AAoEtCnC,kBAAkBoC,SAAlB,GAA8B;AAC5BN,YAAU,oBAAUO,SAAV,CAAoB,CAC5B,oBAAUC,OAAV,CAAkB,oBAAUC,IAA5B,CAD4B,EAE5B,oBAAUA,IAFkB,CAApB,EAGPC,UAJyB;AAK5B1B,2BAAyB,oBAAU2B,MALP;AAM5Bd,aAAW,oBAAUe;AANO,CAA9B;;AASA1C,kBAAkB2C,YAAlB,GAAiC;AAC/B7B,2BAAyB;AACvB,SAAK,CADkB;AAEvB,SAAK,CAFkB;AAGvB,SAAK;AAHkB,GADM;AAM/Ba,aAAW;AANoB,CAAjC;;kBASe3B,iB","file":"ResponsiveMasonry.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst DEFAULT_COLUMNS_COUNT = 1\n\nclass MasonryResponsive extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      columnsCount: DEFAULT_COLUMNS_COUNT,\n    }\n\n    this.handleResize = this.handleResize.bind(this)\n    this.handleRef = this.handleRef.bind(this)\n  }\n\n  componentDidMount() {\n    this.updateColumnsCount()\n    window.addEventListener(\"resize\", this.handleResize) // eslint-disable-line\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize) // eslint-disable-line\n  }\n\n  getSortedBreakPoints() {\n    const breakPoints = Object.keys(this.props.columnsCountBreakPoints)\n    return breakPoints.sort((a, b) => a - b)\n  }\n\n  updateColumnsCount() {\n    const {columnsCountBreakPoints} = this.props\n    const containerWidth = this.container.offsetWidth\n    const breakPoints = this.getSortedBreakPoints()\n    let columnsCount =\n      breakPoints.length > 0\n        ? columnsCountBreakPoints[breakPoints[0]]\n        : DEFAULT_COLUMNS_COUNT\n\n    breakPoints.forEach(breakPoint => {\n      if (breakPoint < containerWidth) {\n        columnsCount = columnsCountBreakPoints[breakPoint]\n      }\n    })\n\n    if (columnsCount && columnsCount !== this.state.columnsCount) {\n      this.setState({columnsCount})\n    }\n  }\n\n  handleResize() {\n    this.updateColumnsCount()\n  }\n\n  handleRef(ref) {\n    if (!this.container) this.container = ref\n  }\n\n  render() {\n    return (\n      <div ref={this.handleRef} className={this.props.className}>\n        {React.Children.map(this.props.children, (child, index) =>\n          React.cloneElement(child, {\n            key: index,\n            columnsCount: this.state.columnsCount,\n          })\n        )}\n      </div>\n    )\n  }\n}\n\nMasonryResponsive.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  columnsCountBreakPoints: PropTypes.object,\n  className: PropTypes.string,\n}\n\nMasonryResponsive.defaultProps = {\n  columnsCountBreakPoints: {\n    350: 1,\n    750: 2,\n    900: 3,\n  },\n  className: null,\n}\n\nexport default MasonryResponsive\n"]}