{"version":3,"sources":["../src/Masonry.js"],"names":["styles","container","display","flexDirection","justifyContent","alignContent","boxSizing","width","column","flexGrow","flexBasis","Masonry","props","children","columnsCount","columns","Children","forEach","child","index","columnIndex","Array","isArray","push","gutter","map","item","i","margin","getColumns","renderColumn","className","renderColumns","Component","propTypes","oneOfType","arrayOf","node","isRequired","number","string","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,SAAS;AACbC,aAAW;AACTC,aAAS,MADA;AAETC,mBAAe,KAFN;AAGTC,oBAAgB,QAHP;AAITC,kBAAc,SAJL;AAKTC,eAAW,YALF;AAMTC,WAAO;AANE,GADE;AASbC,UAAQ;AACNN,aAAS,MADH;AAENC,mBAAe,QAFT;AAGNC,oBAAgB,YAHV;AAINC,kBAAc,SAJR;AAKNI,cAAU,CALJ;AAMNC,eAAW;AANL;AATK,CAAf;;IAmBMC,O;;;;;;;;;;;iCACS;AAAA,mBACsB,KAAKC,KAD3B;AAAA,UACJC,QADI,UACJA,QADI;AAAA,UACMC,YADN,UACMA,YADN;;AAEX,UAAMC,UAAU,EAAhB;;AAEA,sBAAMC,QAAN,CAAeC,OAAf,CAAuBJ,QAAvB,EAAiC,UAACK,KAAD,EAAQC,KAAR,EAAkB;AACjD,YAAMC,cAAcD,QAAQL,YAA5B;;AAEA,YAAI,CAACO,MAAMC,OAAN,CAAcP,QAAQK,WAAR,CAAd,CAAL,EAA0C;AACxCL,kBAAQK,WAAR,IAAuB,EAAvB;AACD;;AAEDL,gBAAQK,WAAR,EAAqBG,IAArB,CAA0BL,KAA1B;AACD,OARD;;AAUA,aAAOH,OAAP;AACD;;;iCAEYP,M,EAAQ;AAAA,UACZgB,MADY,GACF,KAAKZ,KADH,CACZY,MADY;;AAEnB,aAAOhB,OAAOiB,GAAP,CAAW,UAACC,IAAD,EAAOC,CAAP;AAAA,eAChB;AAAA;AAAA,YAAK,KAAKA,CAAV,EAAa,OAAO,EAACC,QAAQJ,MAAT,EAApB;AACGE;AADH,SADgB;AAAA,OAAX,CAAP;AAKD;;;oCAEe;AAAA;;AACd,aAAO,KAAKG,UAAL,GAAkBJ,GAAlB,CAAsB,UAACjB,MAAD,EAASmB,CAAT;AAAA,eAC3B;AAAA;AAAA,YAAK,KAAKA,CAAV,EAAa,OAAO3B,OAAOQ,MAA3B;AACG,iBAAKsB,YAAL,CAAkBtB,MAAlB;AADH,SAD2B;AAAA,OAAtB,CAAP;AAKD;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,OAAOR,OAAOC,SAAnB,EAA8B,WAAW,KAAKW,KAAL,CAAWmB,SAApD;AACG,aAAKC,aAAL;AADH,OADF;AAKD;;;;EAzCmB,gBAAMC,S;;AA4C5BtB,QAAQuB,SAAR,GAAoB;AAClBrB,YAAU,oBAAUsB,SAAV,CAAoB,CAC5B,oBAAUC,OAAV,CAAkB,oBAAUC,IAA5B,CAD4B,EAE5B,oBAAUA,IAFkB,CAApB,EAGPC,UAJe;AAKlBxB,gBAAc,oBAAUyB,MALN;AAMlBf,UAAQ,oBAAUgB,MANA;AAOlBT,aAAW,oBAAUS;AAPH,CAApB;;AAUA7B,QAAQ8B,YAAR,GAAuB;AACrB3B,gBAAc,CADO;AAErBU,UAAQ,GAFa;AAGrBO,aAAW;AAHU,CAAvB;;kBAMepB,O","file":"Masonry.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst styles = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignContent: \"stretch\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  column: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignContent: \"stretch\",\n    flexGrow: 1,\n    flexBasis: 0,\n  },\n}\n\nclass Masonry extends React.Component {\n  getColumns() {\n    const {children, columnsCount} = this.props\n    const columns = []\n\n    React.Children.forEach(children, (child, index) => {\n      const columnIndex = index % columnsCount\n\n      if (!Array.isArray(columns[columnIndex])) {\n        columns[columnIndex] = []\n      }\n\n      columns[columnIndex].push(child)\n    })\n\n    return columns\n  }\n\n  renderColumn(column) {\n    const {gutter} = this.props\n    return column.map((item, i) => (\n      <div key={i} style={{margin: gutter}}>\n        {item}\n      </div>\n    ))\n  }\n\n  renderColumns() {\n    return this.getColumns().map((column, i) => (\n      <div key={i} style={styles.column}>\n        {this.renderColumn(column)}\n      </div>\n    ))\n  }\n\n  render() {\n    return (\n      <div style={styles.container} className={this.props.className}>\n        {this.renderColumns()}\n      </div>\n    )\n  }\n}\n\nMasonry.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  columnsCount: PropTypes.number,\n  gutter: PropTypes.string,\n  className: PropTypes.string,\n}\n\nMasonry.defaultProps = {\n  columnsCount: 3,\n  gutter: \"0\",\n  className: null,\n}\n\nexport default Masonry\n"]}