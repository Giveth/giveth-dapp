"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  container: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "center",
    alignContent: "stretch",
    boxSizing: "border-box",
    width: "100%"
  },
  column: {
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-start",
    alignContent: "stretch",
    flexGrow: 1,
    flexBasis: 0
  }
};

var Masonry = function (_React$Component) {
  _inherits(Masonry, _React$Component);

  function Masonry() {
    _classCallCheck(this, Masonry);

    return _possibleConstructorReturn(this, (Masonry.__proto__ || Object.getPrototypeOf(Masonry)).apply(this, arguments));
  }

  _createClass(Masonry, [{
    key: "getColumns",
    value: function getColumns() {
      var _props = this.props,
          children = _props.children,
          columnsCount = _props.columnsCount;

      var columns = [];

      _react2.default.Children.forEach(children, function (child, index) {
        var columnIndex = index % columnsCount;

        if (!Array.isArray(columns[columnIndex])) {
          columns[columnIndex] = [];
        }

        columns[columnIndex].push(child);
      });

      return columns;
    }
  }, {
    key: "renderColumn",
    value: function renderColumn(column) {
      var gutter = this.props.gutter;

      return column.map(function (item, i) {
        return _react2.default.createElement(
          "div",
          { key: i, style: { margin: gutter } },
          item
        );
      });
    }
  }, {
    key: "renderColumns",
    value: function renderColumns() {
      var _this2 = this;

      return this.getColumns().map(function (column, i) {
        return _react2.default.createElement(
          "div",
          { key: i, style: styles.column },
          _this2.renderColumn(column)
        );
      });
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        { style: styles.container, className: this.props.className },
        this.renderColumns()
      );
    }
  }]);

  return Masonry;
}(_react2.default.Component);

Masonry.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]).isRequired,
  columnsCount: _propTypes2.default.number,
  gutter: _propTypes2.default.string,
  className: _propTypes2.default.string
};

Masonry.defaultProps = {
  columnsCount: 3,
  gutter: "0",
  className: null
};

exports.default = Masonry;
//# sourceMappingURL=Masonry.js.map