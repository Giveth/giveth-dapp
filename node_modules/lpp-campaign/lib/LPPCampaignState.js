"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LPPCampaignState = function () {
  function LPPCampaignState(lppCampaign) {
    _classCallCheck(this, LPPCampaignState);

    this.campaign = lppCampaign;
  }

  _createClass(LPPCampaignState, [{
    key: "getState",
    value: function getState() {
      return Promise.all([this.campaign.liquidPledging(), this.campaign.idProject(), this.campaign.reviewer(), this.campaign.newReviewer(), this.campaign.isCanceled(), this.campaign.campaignToken()]).then(function (results) {
        return {
          liquidPledging: results[0],
          idProject: results[1],
          reviewer: results[2],
          newReviewer: results[3],
          canceled: results[4],
          campaignToken: results[5]
        };
      });
    }
  }]);

  return LPPCampaignState;
}();

module.exports = LPPCampaignState;
//# sourceMappingURL=LPPCampaignState.js.map